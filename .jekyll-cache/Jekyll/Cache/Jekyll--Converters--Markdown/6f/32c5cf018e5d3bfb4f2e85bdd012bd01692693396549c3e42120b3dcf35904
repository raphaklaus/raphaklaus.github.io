I"¦<p>JÃ¡ aconteceu de vocÃª modificar umas linhas de cÃ³digo e mais para frente o teste/funcionalidade quebrar e vocÃª nÃ£o conseguir rastrear o que ocasionou?</p>

<!-- more -->

<p>Ou entÃ£o, instalar um novo plugin e nÃ£o funcionar de jeito nenhum mesmo seguindo todos os passos da documentaÃ§Ã£o? Vou deixar algumas dicas uteis nesse artigo.</p>

<p>Existem diversos cenÃ¡rios em que essa habilidade Ã© valiosa, e para cada um desses uma abordagem diferente deve ser tomada. Vou levantar alguns:</p>

<p>LÃ¡ estÃ¡ vocÃª instalando aquele novo framework maravilhoso que vai resolver todos os seus problemas. VocÃª segue todos os passos da documentaÃ§Ã£o e dos tutoriais, porÃ©m nÃ£o funciona.</p>

<h2 id="entender-se-o-problema-Ã©-especÃ­fico-do-seu-ambiente">Entender se o problema Ã© especÃ­fico do seu ambiente</h2>

<p>Por exemplo, no Linux alguns comandos precisam ser executados com <strong>su</strong> na frente. Esse tipo de detalhe pode ser o que faltava na documentaÃ§Ã£o, e para fazer o seu sistema rodar.</p>

<p>Entender se a documentaÃ§Ã£o/tutorial foi pensada no seu ambiente atual Ã© importante para tentar passar por cima dessas situaÃ§Ãµes.</p>

<h2 id="dica-de-ouro-pesquise-no-github">Dica de ouro: pesquise no GitHub</h2>

<p>Uma das maneiras mais eficientes de se solucionar um problema Ã© saber como alguÃ©m que teve sucesso fez.</p>

<p><img src="/assets/images/github-search.png" alt="Resultado de pesquisa do GitHub" /></p>

<p>Na parte superior esquerda do <a href="http://github.com" target="_blank">GitHub</a> tem um campo para busca. Use esse campo com os trechos referentes Ã  ferramenta que estÃ¡ tendo problema e encontre milhares de cÃ³digos que tambÃ©m a usam. Assim vocÃª poderÃ¡ ver se tem alguma diferenÃ§a que faz esse cÃ³digo funcionar e o seu nÃ£o. Pode atÃ© mesmo baixar o repositÃ³rio e testar em seu ambiente!</p>

<h2 id="o-mais-comum-vocÃª-pode-ter-mudado-algo-no-cÃ³digo-sem-perceber">O mais comum: vocÃª pode ter mudado algo no cÃ³digo sem perceber</h2>

<p>Nessa situaÃ§Ã£o, o melhor a se fazer Ã© voltar a um ponto do cÃ³digo que vocÃª <strong>sabe</strong> que tudo funcionava conforme o esperado, e ir adicionando sua funcionalidade linha Ã  linha. Em algum momento seu cÃ³digo vai quebrar e vocÃª estarÃ¡ mais perto de saber o porquÃª.</p>

<p>Se vocÃª nÃ£o entende o motivo da linha que causa o problema fazer seu cÃ³digo parar, Ã© porque provavelmente Ã© uma funÃ§Ã£o que <strong>esconde comportamentos encapsulados</strong>. VocÃª terÃ¡ que compreender o que a funÃ§Ã£o estÃ¡ fazendo. A melhor forma Ã© abrir essa funÃ§Ã£o e estudÃ¡-la, ou se for de terceiros (biblioteca, plugin, etc), procure a documentaÃ§Ã£o na internet.</p>

<h2 id="dependÃªncia-atualizada">DependÃªncia atualizada</h2>

<p>99% dos projetos utilizam dependÃªncias, e se vocÃª for minimamente organizado estarÃ¡ usando um gerenciador de dependÃªncias (packages.json, gemfile, etc).</p>

<p>Ã€s vezes a quebra vem de fora. Pode ser uma mudanÃ§a de API, de parÃ¢metro ou mesmo de estrutura. Recomendo <strong>sempre versionar</strong> o arquivo que guarda as dependÃªncias, e guardar a dependÃªncia <strong>com a versÃ£o citada explicitamente</strong>, assim vocÃª terÃ¡ um histÃ³rico de alteraÃ§Ã£o.</p>

<p>Nunca subestime essa possibilidade, vocÃª pode perder muito tempo. Esse tipo de problema Ã© muito comum em projetos com mais de 10 dependÃªncias.</p>

<h2 id="seja-um-bom-debugger">Seja um bom debugger</h2>

<p>Nem sempre Ã© facil encontrar a causa do problema. Mas fica mais simples quando o desenvolvedor sabe usar as ferramentas certas. Use <strong>breakpoints</strong> em conjunto com <strong>watches</strong> e monitore o fluxo do cÃ³digo. Ã‰ fundamental entender o que no seu sistema acontece <strong>em paralelo</strong> para poder monitorar esta Ã¡rea tambÃ©m.</p>

<p>Se vocÃª se sente confiante em debugar com <code class="language-plaintext highlighter-rouge">alert</code> ou <code class="language-plaintext highlighter-rouge">console.log</code>, vÃ¡ em frente. Mas sempre hÃ¡ a possibilidade disso sem querer subir para produÃ§Ã£o. AlÃ©m do mais, uma ferramenta de debug dÃ¡ ao desenvolvedor um ambiente muito mais preciso para localizaÃ§Ã£o de bugs e situaÃ§Ãµes, como <strong>breakpoint condicional</strong> e visualizaÃ§Ã£o da <strong>call stack</strong>.</p>

<h2 id="comece-do-zero">Comece do zero</h2>

<p>Uma tÃ©cnica que jÃ¡ me ajudou muito foi a de comeÃ§ar do zero. Ela consiste em pegar o grupo de cÃ³digo/ferramentas que estÃ¡ tentando fazer funcionar, abrir um projeto do zero e codificar de forma mais <strong>unitÃ¡ria</strong> possÃ­vel, sem dependÃªncias desnecessÃ¡rias, e usando sÃ³ uma funÃ§Ã£o.</p>

<p>Dessa forma vocÃª estarÃ¡ mais seguro que nÃ£o hÃ¡ conflitos externos ao <strong>conjunto mÃ­nimo funcional</strong> e consequentemente encontrarÃ¡ o problema.</p>

<h2 id="nÃ£o-fique-preso-dentro-da-caixa">NÃ£o fique preso dentro da caixa</h2>

<p>Se vocÃª nÃ£o consegue resolver, por que nÃ£o muda para outra ferramenta? NÃ£o pode? PeÃ§a ajuda a algum amigo, pergunte no <a href="http://stackoverflow.com/" target="_blank">stackoverflow</a>, nos grupos de Facebook, ou no lindo <a href="https://github.com/frontendbr/forum/issues" target="_blank">Forum Front-End</a>.</p>

<p>O que nÃ£o pode Ã© enlouquecer.</p>
:ET